# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XJySf4qBD9BeSLA691K3ZPADIe9GyUn8
"""



"""# Task
Perform list operations in Python, including indexing, list manipulation, and list copy/cloning, using the provided album data.

## Create a list

### Subtask:
Create a list containing data about an album.

**Reasoning**:
Create a Python list named `album_info` and populate it with the specified data.
"""

album_info = ["The Dark Side of the Moon", "Pink Floyd", 1973, ["Progressive Rock", "Art Rock"]]

"""## Access list elements

### Subtask:
Access elements of the list using indexing.

**Reasoning**:
Access elements of the list using indexing as per the instructions.
"""

album_title = album_info[0]
artist_name = album_info[1]
release_year = album_info[2]
genres_list = album_info[3]
first_genre = genres_list[0]

print(f"Album Title: {album_title}")
print(f"Artist Name: {artist_name}")
print(f"Release Year: {release_year}")
print(f"Genres List: {genres_list}")
print(f"First Genre: {first_genre}")

"""## Manipulate list

### Subtask:
Modify the list using various list methods.

**Reasoning**:
The subtask requires modifying the list using various list methods including append, extend, insert, and removing an element by index. I will write a single code block to perform all these modifications sequentially and then print the final list.
"""

# Append a new element, "EMI Studios", to the album_info list
album_info.append("EMI Studios")

# Extend the genre list within album_info by adding "Psychedelic Rock"
genres_list = album_info[3]
genres_list.extend(["Psychedelic Rock"])

# Insert the element "Concept Album" at index 3 of the album_info list
album_info.insert(3, "Concept Album")

# Remove the element at index 2 (which should be the release year after insertion)
album_info.pop(2)

# Print the modified album_info list to verify the changes
print(album_info)

"""## Copy/clone list

### Subtask:
Create a copy or clone of the list.

**Reasoning**:
Create both shallow and deep copies of the list and print them to observe the differences.
"""

import copy

# Create a shallow copy using slicing
shallow_copy = album_info[:]

# Create a deep copy using copy.deepcopy()
deep_copy = copy.deepcopy(album_info)

# Print both copies
print("Shallow Copy:", shallow_copy)
print("Deep Copy:", deep_copy)

"""## Summary:

### Data Analysis Key Findings

*   A Python list named `album_info` was created containing the album title ("The Dark Side of the Moon"), artist name ("Pink Floyd"), release year (1973), and a list of genres (\["Progressive Rock", "Art Rock"]\).
*   Individual elements from the `album_info` list were successfully accessed using indexing (0, 1, 2, 3), including accessing a nested element (the first genre, "Progressive Rock") from the list at index 3.
*   The `album_info` list was modified using various methods: "EMI Studios" was appended, "Psychedelic Rock" was added to the nested genre list, "Concept Album" was inserted at index 3, and the element at index 2 was removed.
*   Both a shallow copy (using slicing) and a deep copy (using `copy.deepcopy()`) of the modified `album_info` list were successfully created and printed.

### Insights or Next Steps

*   While shallow and deep copies produced identical results in this case, it is important to understand their differences, especially when dealing with lists containing nested mutable objects. Further exploration of these differences through modification of the original list after copying could be beneficial.
*   The flexibility of Python lists, demonstrated through various manipulation methods (append, extend, insert, pop), allows for dynamic data management. This understanding can be applied to more complex data structures and operations.

"""